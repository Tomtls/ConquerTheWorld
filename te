nun bekomme ich folgenden Fehler, ich schicke dir dazu auch die methode
public void startClient(String name, Color color, String ip){
        player = new Player(name, color);
        client = new GameClient(player);
        client.connect(ip);

    // Initialisierung von mapPanel, falls es noch nicht initialisiert wurde
    if (mapPanel == null) {
        mapPanel = new MapPanel(client.getGame()); // Stellen Sie sicher, dass client.getGame() den richtigen Spielzustand zurückgibt
        frame.add(mapPanel);
        mapPanel.adjustPanel(frame); // Stellen Sie sicher, dass die Panelgröße angepasst wird
        frame.revalidate();
        frame.repaint();
    } else {
        // mapPanel ist bereits initialisiert, setzen Sie gegebenenfalls das Spiel neu
        mapPanel.setGame(client.getGame()); // Setzen Sie das Spiel erneut, falls notwendig
    }

    GameController gameController = new GameController(client.getGame(), mapPanel);
    mapPanel.setGameController(gameController);

    frame.remove(clientConnectingPanel);
    frame.add(mapPanel);
    frame.revalidate();
    frame.repaint();
    }
package view;

import model.Game;
import model.IDButton;
import model.State;
import controller.GameController;

import javax.swing.*;

import java.awt.*;
import java.awt.image.BufferedImage;

public class MapPanel extends JPanel {
    public static final int INITIAL_PANEL_WIDTH = 1050;
    public static final int INITIAL_PANEL_HEIGHT = 1400;
    public static final double PANEL_ASPECT_RATIO = (double) INITIAL_PANEL_WIDTH / INITIAL_PANEL_HEIGHT;
    private static final int[][] INITIAL_BUTTON_POSITION = {
        {309,0}, {541,91}, {90,197}, {614,266}, {532,365}, {0,458}, 
        {687,617}, {218,619}, {459,626}, {26,748}, {353,815}, {185,950}
    };
    private static IDButton[] buttons;
    private Game game;
    private GameController gameController;

    public MapPanel(Game game) {
        this.game = game;
        setLayout(null);
        setBackground(Color.WHITE); //test
        
        addIdButtons();
        adjustPanel(Main.getFrame()); //adjust Size & Position(Center) of MapPanel

    }   

    private void addIdButtons(){
        buttons = new IDButton[INITIAL_BUTTON_POSITION.length];
        for (int i = 0; i < buttons.length; i++) {
            State state = game.getState(i);
            buttons[i] = IDButton.createIdButton(state.getId(), state.getOwner().getColor(), state.getUnits());
            add(buttons[i]);
        }
    }

    public void changeButtonColor(State state){
        Color color = state.getOwner().getColor();
        int id = state.getId();

        BufferedImage coloredImg = IDButton.changeImageColor(buttons[id].getImg(), color);
        ImageIcon imgIcon = new ImageIcon(coloredImg);
        
        buttons[id].setIcon(imgIcon);
        buttons[id].setImg(coloredImg);
        buttons[id].revalidate();
        buttons[id].repaint();
    }

    public void adjustPanel(JFrame frame) {
        //neue Framegöße berechnen
        Insets insets = frame.getInsets();
        int frameHeight = frame.getHeight() - insets.top - insets.bottom;
        int frameWidth = frame.getWidth() - insets.left - insets.right;

        int panelWidth = (int) (frameWidth * 0.9);
        int panelHeight = (int) (panelWidth / PANEL_ASPECT_RATIO);

        if (panelHeight > frameHeight) {
            panelHeight = frameHeight;
            panelWidth = (int) (panelHeight * PANEL_ASPECT_RATIO);
        }

        int panelX = (frameWidth - panelWidth) / 2;
        int panelY = (frameHeight - panelHeight) / 2;

        setBounds(panelX, panelY, panelWidth, panelHeight);
        adjustButtons();
    }

    public void adjustButtons() {
          double[] sizeRatio = { 
            (double) getWidth() / MapPanel.INITIAL_PANEL_WIDTH, 
            (double) getHeight() / MapPanel.INITIAL_PANEL_HEIGHT
        };
        
        for (int i = 0; i < buttons.length && i < INITIAL_BUTTON_POSITION.length; i++) {
            adjustButton(buttons[i], INITIAL_BUTTON_POSITION[i], sizeRatio);
        }
    }

    public static void adjustButton(IDButton button, int[] initialPosition, double[] sizeRatio) {
        int xPosition = (int) (initialPosition[0] * sizeRatio[0]);
        int yPosition = (int) (initialPosition[1] * sizeRatio[1]);
        
        BufferedImage img = button.getImg();
        int buttonWidth = (int) (img.getWidth() * sizeRatio[0]);
        int buttonHeight = (int) (img.getHeight() * sizeRatio[1]);
        Image scaledImg = img.getScaledInstance(buttonWidth, buttonHeight, Image.SCALE_SMOOTH);
        ImageIcon imgIcon = new ImageIcon(scaledImg);
        BufferedImage bufferedScaledImage = button.convertToBufferedImage(scaledImg);
        
        button.setIcon(imgIcon);
        button.setImg(bufferedScaledImage);
        button.setBounds(xPosition, yPosition, buttonWidth, buttonHeight);
        button.revalidate();
        button.repaint();
    
    }
    
    public void updateButton(int index, State state) {
        buttons[index].setText(String.valueOf(state.getUnits()));
    }

    public void setGameController(GameController gameController) {
        this.gameController = gameController;
        for (IDButton button : buttons) {
            button.addMouseListener(gameController);
        }
    }

    public void setGame (Game game) {
        this.game = game;
    }

}
Client gestartet!
Exception in thread "AWT-EventQueue-0" java.lang.NullPointerException: Cannot invoke "model.Game.getState(int)" because "this.game" is null
        at view.MapPanel.addIdButtons(MapPanel.java:38)
        at view.MapPanel.<init>(MapPanel.java:30)
        at view.Main.startClient(Main.java:127)
        at view.ClientConnectingPanel$1.actionPerformed(ClientConnectingPanel.java:68)
        at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1972)
        at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2314)
        at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:407)
        at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
        at java.desktop/javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:279)
        at java.desktop/java.awt.Component.processMouseEvent(Component.java:6621)
        at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3398)
        at java.desktop/java.awt.Component.processEvent(Component.java:6386)
        at java.desktop/java.awt.Container.processEvent(Container.java:2266)
        at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:4996)
        at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2324)
        at java.desktop/java.awt.Component.dispatchEvent(Component.java:4828)
        at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4948)
        at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4575)
        at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4516)
        at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2310)
        at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2780)
        at java.desktop/java.awt.Component.dispatchEvent(Component.java:4828)
        at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:775)
        at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720)
        at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714)
        at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
        at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
        at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:98)
        at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:747)
        at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
        at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
        at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
        at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:744)
        at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
        at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
        at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
        at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
        at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
        at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)